/*
 * ++C - C++ introduction
 * Copyright (C) 2013, 2014, 2015, 2016, 2017 Wilhelm Meier <wilhelm.meier@hs-kl.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <stddef.h>

namespace std {
    enum class byte : uint8_t {};

    inline constexpr byte operator~(byte b) {
        return byte{static_cast<uint8_t>(~static_cast<uint8_t>(b))};
    }
    inline void operator|=(volatile byte& lhs, byte rhs) {
        lhs = byte{static_cast<uint8_t>(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs))};
    }
    inline constexpr void operator|=(byte& lhs, byte rhs) {
        lhs = byte{static_cast<uint8_t>(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs))};
    }

    void inline operator&=(volatile byte& lhs, byte rhs) {
        lhs = byte{static_cast<uint8_t>(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs))};
    }
    inline std::byte operator&(const volatile byte& lhs, const byte rhs) {
        return byte{static_cast<uint8_t>(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs))};
    }
    inline constexpr void operator&=(byte& lhs, byte rhs) {
        lhs = byte{static_cast<uint8_t>(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs))};
    }

    namespace literals {
        constexpr byte operator"" _byte(unsigned long long v) {
            return byte{static_cast<uint8_t>(v)};
        }
    }
}

